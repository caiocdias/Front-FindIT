@page "/"

<h3>Galeria de Itens</h3>
<div class="d-flex align-items-center">
    <input @bind="searchTerm" @bind:event="oninput" placeholder="Pesquisar itens..." class="form-control" style="flex-grow: 1; border-color: #34251f;" />
    <button @onclick="SearchItems" class="btn" style="background-color: #34251f; color: white; margin-left: 1rem">Pesquisar</button>
</div>
@if (items != null && items.Any())
{
    <div class="row mt-3">
        @foreach (var item in items)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm"
                     @onclick="() => ShowItemDetails(item.Id)"
                     style="border: 2px solid @((item.Id == selectedItemId) ? "#34251f" : "#ddd");
                            border-width: @(item.Id == selectedItemId ? "4px" : "2px");">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@item.Category.Name</h6>
                        <p class="card-text">@item.Description</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (similarItems != null && similarItems.Any())
{
    <h4 class="mt-4">Itens Similares:</h4>
    <div class="row mt-3">
        @foreach (var similarItem in similarItems)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm" style="border: 2px solid #ddd;">
                    <div class="card-body">
                        <h5 class="card-title">@similarItem.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@similarItem.Category.Name</h6>
                        <p class="card-text">@similarItem.Description</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private string searchTerm = string.Empty;
    private List<ItemDto> items;
    private List<ItemDto> similarItems;
    private int selectedItemId;

    private async Task SearchItems()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            try
            {
                using var httpClient = new HttpClient();
                var response = await httpClient.GetAsync($"https://localhost:44340/api/Item/Search/{Uri.EscapeDataString(searchTerm)}");

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<List<ItemDto>>();
                    items = result ?? new List<ItemDto>();
                }
                else
                {
                    items = new List<ItemDto>();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro: {ex.Message}");
                items = new List<ItemDto>();
            }
        }
    }

    private async Task ShowItemDetails(int itemId)
    {
        selectedItemId = itemId; // Atualiza o item selecionado

        try
        {
            using var httpClient = new HttpClient();
            var response = await httpClient.GetAsync($"https://localhost:44340/api/Item/GetSimilarItems/{itemId}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<ItemDto>>();
                similarItems = result ?? new List<ItemDto>();
            }
            else
            {
                similarItems = new List<ItemDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar itens similares: {ex.Message}");
            similarItems = new List<ItemDto>();
        }
    }

    public class ItemDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public bool IsActive { get; set; }
        public CategoryDto Category { get; set; } = new();
        public UserDto RegisteredUser { get; set; } = new();
        public UserDto? ClaimedUser { get; set; }  // ClaimedUser pode ser nulo
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }

    public class CategoryDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class UserDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
}
