@page "/ItemGallery"

<h3>Item Gallery</h3>

<input @bind="searchTerm" @bind:event="oninput" placeholder="Pesquisar itens..." class="form-control" />
<button @onclick="SearchItems" class="btn btn-primary mt-2">Pesquisar</button>

@if (items != null && items.Any())
{
    <div class="row mt-3">
        @foreach (var item in items)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@item.Category.Name</h6>
                        <p class="card-text">@item.Description</p>
                        <p class="card-text"><small class="text-muted">Cadastrado por: @item.RegisteredUser.Name</small></p>
                        <p class="card-text"><small class="text-muted">Reivindicado por: @(item.ClaimedUser?.Name ?? "Não reivindicado")</small></p>
                        <p class="card-text">
                            <small class="text-muted">
                                Criado em: @item.CreatedAt.ToString("dd/MM/yyyy")<br />
                                Atualizado em: @item.UpdatedAt.ToString("dd/MM/yyyy")
                            </small>
                        </p>
                        @if (item.IsActive)
                        {
                            <span class="badge bg-success">Ativo</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Inativo</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (items != null)
{
    <p class="mt-3">Nenhum item encontrado.</p>
}

@code {
    private string searchTerm = string.Empty;
    private List<ItemDto> items;

    private async Task SearchItems()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            try
            {
                using var httpClient = new HttpClient();
                var response = await httpClient.GetAsync($"https://localhost:44340/api/Item/Search/{Uri.EscapeDataString(searchTerm)}");

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<List<ItemDto>>();
                    items = result ?? new List<ItemDto>();
                }
                else
                {
                    items = new List<ItemDto>();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro: {ex.Message}");
                items = new List<ItemDto>();
            }
        }
    }

    public class ItemDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public bool IsActive { get; set; }
        public CategoryDto Category { get; set; } = new();
        public UserDto RegisteredUser { get; set; } = new();
        public UserDto? ClaimedUser { get; set; }  // ClaimedUser pode ser nulo
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }

    public class CategoryDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class UserDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
}
